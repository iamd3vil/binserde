// Code generated by gandalf(BuildDate: {{.BuildDate}}, Version: {{.BuildVersion}}). DO NOT EDIT.
package {{.Pkg}}

import (
    "encoding/binary"
    "errors"
)

{{- range .MarshalStructs}}
func (s *{{.StructName}}) Marshal() []byte {
    dest := make([]byte, s.Size())
    offset := 0
    {{- range .Fields}}
        {{- if not .Append}}
            binary.{{$.Endian}}.{{.Func}}(dest[offset:offset+{{.Offset}}], {{.FieldName}})
        {{- else}}
            copy(dest[offset:offset+{{.Offset}}], []byte(s.{{.FieldName}}))
        {{- end}}
        offset += {{.Offset}}
    {{- end}}
    return dest
}

func (s *{{.StructName}}) Size() int {
    ln := 0
    {{- range .Fields}}
        ln += {{.Offset}}
    {{- end}}
    return ln
}
{{- end}}



{{- range .UnmarshalStructs}}
func (s *{{.StructName}}) Unmarshal(data []byte) error {
    if len(data) < s.Size() {
        return errors.New("error while unmarshalling: data is not enough size")
    }
    offset := 0
    {{- range .Fields}}
        {{- if .Append}}
            s.{{.FieldName}} = data[offset:offset+{{.Offset}}]
        {{- else if .String}}
            s.{{.FieldName}} = string(data[offset:offset+{{.Offset}}])
        {{- else}}
            s.{{.FieldName}} = {{.Type}}(binary.{{$.Endian}}.{{.Func}}(data[offset:offset+{{.Offset}}]))
        {{- end}}
        offset += {{.Offset}}
    {{- end}}
    return nil
}
{{- end}}