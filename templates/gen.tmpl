// Code generated by binserde(Build: {{ .BuildString }}). DO NOT EDIT.
package {{.Pkg}}

import (
    "encoding/binary"
    "io"
    "bytes"
    "math"
)

{{- range .MarshalStructs}}
func (s *{{.StructName}}) Marshal(wr io.Writer) error {
    {{- if .NeedsBuffer }}
    buf := make([]byte, 8)
    {{- end }}
    var (
        {{- if .HasFieldToBeMarshalled }}
        byBuf []byte
        {{- end }}
        err error
    )
    {{- range .Fields}}
        {{- if not .Append}}
            binary.{{$.Endian}}.{{.Func}}(buf[:{{.Offset}}], {{.FieldName}})
            _, err = wr.Write(buf[:{{.Offset}}])
            if err != nil {
                return err
            }
        {{- else}}
            {{- if not .HasToBeMarshalled }}
                byBuf = make([]byte, {{.Offset}})
                copy(byBuf, {{.FieldName}})
                _, err = wr.Write(byBuf)
                if err != nil {
                    return err
                }
            {{- else }}
                if err := {{.FieldName}}.Marshal(wr); err != nil {
                    return err
                }
            {{- end}}
        {{- end}}
    {{- end}}
    return nil
}

func (s *{{.StructName}}) MarshalToBytes() ([]byte, error) {
    buf := bytes.NewBuffer(make([]byte, 0, s.Size()))
    if err := s.Marshal(buf); err != nil {
        return nil, err
    }
    return buf.Bytes(), nil
}

func (s *{{.StructName}}) Size() int {
    ln := 0
    {{- range .Fields}}
        {{- if not .Append}}
            ln += {{.Offset}}
        {{- else}}
            {{- if not .HasToBeMarshalled }}
                ln += {{.Offset}}
            {{- else }}
                ln += {{.FieldName}}.Size()
            {{- end}}
        {{- end}}
    {{- end}}
    return ln
}
{{- end}}



{{- range .UnmarshalStructs}}
func (s *{{.StructName}}) Unmarshal(rdr io.Reader) error {
    {{- if .NeedsBuffer }}
    buf := make([]byte, 8)
    {{- end }}
    {{- range .Fields}}
        {{- if .Append}}
            s.{{.FieldName}} = make([]byte, {{.Offset}})
            if _, err := io.ReadFull(rdr, s.{{.FieldName}}); err != nil {
                return err
            }
        {{- else if .Float64}}
            if _, err := io.ReadFull(rdr, buf[:{{.Offset}}]); err != nil {
                return err
            }
            s.{{.FieldName}} = math.Float64frombits(binary.{{$.Endian}}.{{.Func}}(buf[:{{.Offset}}]))
        {{- else if .String}}
            buf{{.FieldName}} := make([]byte, {{.Offset}})
            if _, err := io.ReadFull(rdr, buf{{.FieldName}}); err != nil {
                return err
            }
            s.{{.FieldName}} = string(buf{{.FieldName}})
        {{- else if .Struct}}
            if err := s.{{.FieldName}}.Unmarshal(rdr); err != nil {
                return err
            }
        {{- else}}
            if _, err := io.ReadFull(rdr, buf[:{{.Offset}}]); err != nil {
                return err
            }
            s.{{.FieldName}} = {{.Type}}(binary.{{$.Endian}}.{{.Func}}(buf[:{{.Offset}}]))
        {{- end}}
        
    {{- end}}
    return nil
}

func (s *{{.StructName}}) UnmarshalFromBytes(data []byte) error {
    buf := bytes.NewBuffer(data)
    return s.Unmarshal(buf)
}
{{- end}}
